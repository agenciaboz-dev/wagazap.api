// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
	provider = "mysql"
	url = env("DATABASE_URL")
}
generator client {
	provider = "prisma-client-js"
	previewFeatures = ["fullTextSearch","fullTextIndex"]
}

model Nagazap {
    id              String          @id @default(uuid())
    token       String      @db.Text
    lastUpdated String      
    appId       String      
    phoneId     String      
    businessId  String      
    stack       String      @db.LongText 
    blacklist   String      @db.LongText 
    frequency   String      
    batchSize   Int         
    lastMessageTime String  
    paused      Boolean     
    sentMessages    String  @db.LongText
    failedMessages    String  @db.LongText
    receivedMessages    NagazapMessage[]

    displayName String?
    displayPhone String?

    companyId      String
    company        Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)

    links       NagazapLink[]
    bots        Bot[]
}

model NagazapMessage {
    id          Int         @id @default(autoincrement())
    name        String
    from        String
    timestamp   String
    text        String      @db.LongText
    type        String      @default("text")
    nagazap_id  String
    nagazap     Nagazap     @relation(fields: [nagazap_id], references: [id], onDelete: Cascade)
}


model Washima {
    id              String              @id
    name            String
    number          String
    created_at      String
    active          Boolean             @default(true)

    companies       Company[]
    bots            Bot[]

}

model WashimaMedia {
    message_id  String      @id
    filename    String
    data        String      @db.LongText
    mimetype    String
    washima_id  String
    size        String      @default("indispon√≠vel")
}

model WashimaProfilePic {
    chat_id         String      @id
    last_updated    String
    url             String      @db.LongText
    washima_id      String
}

model WashimaMessage {
    sid         String          @id
    washima_id  String
    chat_id     String          @db.Text

    id          String          @db.LongText
    author      String?
    body        String          @db.LongText
    from        String
    fromMe      Boolean
    hasMedia    Boolean
    timestamp   String
    to          String
    type        String
    ack         Int?
    edited      Boolean         @default(false)
    deleted     Boolean         @default(false)
    replied_to  Json?

    @@fulltext([body])
}

model WashimaGroupUpdates {
    sid         String          @id
    washima_id  String
    chat_id     String          @db.Text

    id          String          @db.LongText
    author      String
    body        String          @db.LongText
    recipientIds String         @db.LongText
    timestamp   String
    type        String
}

model User {
    id              String          @id @default(uuid())
    name        String
    email       String          @unique
    password    String          @db.Text

    admin       Boolean         @default(false)
    owner       Boolean         @default(false)
    active      Boolean         @default(true)

    company_id  String
    company     Company         @relation(fields: [company_id], references: [id], onDelete: Cascade)

    logs        Log[]
}
model Company {
    id              String          @id @default(uuid()) 
    full_name        String          @db.Text
    business_name    String          @db.Text
    document         String
    address         Json

    users            User[]
    washimas        Washima[]
    nagazaps        Nagazap[]
    bots            Bot[]
    logs            Log[]
}

model NagazapLink {
        original_url    String          @db.Text
        new_url         String          @id @default(uuid())
        created_at      String
        clicks          Json
        template_name   String          @default("default")
        nagazap_id      String
        nagazap         Nagazap         @relation(fields: [nagazap_id], references: [id], onDelete: Cascade)
}

model Bot {
    id              String          @id @default(uuid())
    name            String
    created_at      String
    trigger         String
    triggered       Int
    expiry_minutes  Int             @default(30)
    fuzzy_threshold Float           @default(0.1)

    instance        Json
    active_on       Json

    company_id      String
    company         Company         @relation(fields: [company_id], references: [id], onDelete: Cascade)

    washimas        Washima[]
    nagazaps        Nagazap[]
}

model Log {
    id              String          @id @default(uuid())

    timestamp       String
    text            String          @db.Text
    color           String          @default("info")

    user_id         String
    user            User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
    company_id      String
    company         Company         @relation(fields: [company_id], references: [id], onDelete: Cascade)
}